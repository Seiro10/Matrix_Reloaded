services:
  # Router Agent
  router-agent:
    build:
      context: ./services/router-agent
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - ENVIRONMENT=production
      - PORT=8080
      - DB_PATH=/app/data/content_db.sqlite
      # API keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # Agent communication URLs - use service names
      - REWRITER_AGENT_URL=http://rewriter-main:8085
      - METADATA_GENERATOR_URL=http://metadata-generator:8084
    volumes:
      - router_agent_data:/app/data
      - router_agent_output:/app/output
      - router_agent_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-agents
    depends_on:
      - copywriter-agent

  # NEW Rewriter Main (FastAPI from AI-Copywriter)
  rewriter-main:
    build:
      context: ./services/article-rewriter-api
      dockerfile: Dockerfile
    ports:
      - "8085:8085"
    environment:
      - ENVIRONMENT=production
      # API Keys
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      # WordPress Configuration
      - USERNAME_WP=${WORDPRESS_USERNAME}
      - PASSWORD_WP=${WORDPRESS_PASSWORD}
    volumes:
      - rewriter_main_logs:/app/logs
      - rewriter_main_temp:/app/temp
      - rewriter_main_generated:/app/generated
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8085/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-agents

  # NEW Copywriter Agent (WITH CELERY QUEUE SYSTEM)
  copywriter-agent:
    build:
      context: ./services/agents-copywriter
      dockerfile: Dockerfile
    ports:
      - "8083:8083"
    environment:
      - ENVIRONMENT=production
      - PORT=8083
      # Celery Configuration
      - CELERY_BROKER_URL=redis://copywriter-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://copywriter-redis:6379/0
      # API Keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      # WordPress Configuration
      - USERNAME_WP=${WORDPRESS_USERNAME}
      - PASSWORD_WP=${WORDPRESS_PASSWORD}
      - WORDPRESS_BASE_URL=${WORDPRESS_API_URL:-https://stuffgaming.fr}
      # Agent URLs
      - METADATA_GENERATOR_URL=http://metadata-generator:8084
      - REWRITER_AGENT_URL=http://rewriter-main:8085
    volumes:
      - copywriter_agent_logs:/app/logs
      - copywriter_agent_temp:/app/temp
      - copywriter_agent_generated:/app/generated
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8083/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-agents
    depends_on:
      - copywriter-redis

  # NEW Copywriter Celery Worker
  copywriter-worker:
    build:
      context: ./services/agents-copywriter
      dockerfile: Dockerfile
    command: bash -c "export PYTHONPATH=/app:$PYTHONPATH && celery -A core.celery_config.celery_app worker --loglevel=info --queues=copywriter,communication,publishing --concurrency=2"

    environment:
      - ENVIRONMENT=production
      # Celery Configuration
      - CELERY_BROKER_URL=redis://copywriter-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://copywriter-redis:6379/0
      # API Keys
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      # WordPress Configuration
      - USERNAME_WP=${WORDPRESS_USERNAME}
      - PASSWORD_WP=${WORDPRESS_PASSWORD}
      - WORDPRESS_BASE_URL=${WORDPRESS_API_URL:-https://stuffgaming.fr}
      # Agent URLs
      - METADATA_GENERATOR_URL=http://metadata-generator:8084
      - REWRITER_AGENT_URL=http://rewriter-main:8085
    volumes:
      - copywriter_agent_logs:/app/logs
      - copywriter_agent_temp:/app/temp
      - copywriter_agent_generated:/app/generated
    restart: unless-stopped
    networks:
      - content-agents
    depends_on:
      - copywriter-redis

  # NEW Redis for Copywriter Agent
  copywriter-redis:
    image: redis:7-alpine
    networks:
      - content-agents
    volumes:
      - copywriter_redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # NEW Metadata Generator Agent
  metadata-generator:
    build:
      context: ./services/metadata-generator
      dockerfile: Dockerfile
    ports:
      - "8084:8084"
    environment:
      - ENVIRONMENT=production
      - PORT=8084
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - COPYWRITER_AGENT_URL=http://copywriter-agent:8083
    volumes:
      - metadata_generator_logs:/app/logs
      - metadata_generator_temp:/app/temp
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8084/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-agents
    depends_on:
      - copywriter-agent

  # RSS Agent
  rss-agent:
    build:
      context: ./services/rss-agent
      dockerfile: Dockerfile
    ports:
      - "8086:8086"
    environment:
      - ENVIRONMENT=production
      - PORT=8086
      - REDIS_URL=redis://rss-redis:6379/0
      - CELERY_BROKER_URL=redis://rss-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://rss-redis:6379/0
      - ROUTER_AGENT_URL=http://router-agent:8080
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_REGION=${S3_REGION}
    volumes:
      - rss_agent_logs:/app/logs
      - rss_agent_data:/app/data
    restart: unless-stopped
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8086/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-agents
    depends_on:
      - router-agent
      - rss-redis

  # Redis for RSS Agent
  rss-redis:
    image: redis:7-alpine
    environment:
      - ENVIRONMENT=production
      - PORT=8086
      - REDIS_URL=redis://rss-redis:6379/0
      - CELERY_BROKER_URL=redis://rss-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://rss-redis:6379/0
      - ROUTER_AGENT_URL=http://router-agent:8080
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_REGION=${S3_REGION}
    networks:
      - content-agents
    volumes:
      - rss_redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli ping" ]
      interval: 30s
      timeout: 10s
      retries: 3

  # RSS Agent Worker
  rss-worker:
    build:
      context: ./services/rss-agent
      dockerfile: Dockerfile
    command: celery -A core.queue_manager.celery_app worker --loglevel=info --queues=scraping,processing,uploads --concurrency=2
    environment:
      - ENVIRONMENT=production
      - REDIS_URL=redis://rss-redis:6379/0
      - CELERY_BROKER_URL=redis://rss-redis:6379/0
      - CELERY_RESULT_BACKEND=redis://rss-redis:6379/0
      - ROUTER_AGENT_URL=http://router-agent:8080
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - S3_BUCKET_NAME=${S3_BUCKET_NAME}
      - S3_REGION=${S3_REGION}
    volumes:
      - rss_agent_logs:/app/logs
      - rss_agent_data:/app/data
    restart: unless-stopped
    networks:
      - content-agents
    depends_on:
      - rss-redis

  # Content Finder Agent
  content-finder:
    build:
      context: ./services/agents-content-finder
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - PORT=8000
      - ROUTER_AGENT_URL=http://router-agent:8080
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - DATAFOR_SEO_TOKEN=${DATAFOR_SEO_TOKEN}
      - BRIGHT_DATA_API_KEY=${BRIGHT_DATA_API_KEY}
      - BRIGHTDATA_ZONE_NAME=${BRIGHTDATA_ZONE_NAME}
    volumes:
      - content_finder_output:/app/output
      - content_finder_data:/app/data
      - content_finder_logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - content-agents

volumes:
  router_agent_data:
    driver: local
  router_agent_output:
    driver: local
  router_agent_logs:
    driver: local
  rewriter_main_logs:
    driver: local
  rewriter_main_temp:
    driver: local
  rewriter_main_generated:
    driver: local
  copywriter_agent_logs:
    driver: local
  copywriter_agent_temp:
    driver: local
  copywriter_agent_generated:
    driver: local
  copywriter_redis_data:
    driver: local
  content_finder_output:
    driver: local
  content_finder_data:
    driver: local
  content_finder_logs:
    driver: local
  metadata_generator_logs:
    driver: local
  metadata_generator_temp:
    driver: local
  rss_agent_logs:
    driver: local
  rss_agent_data:
    driver: local
  rss_redis_data:
    driver: local

networks:
  content-agents:
    driver: bridge