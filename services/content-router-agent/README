# File: services/content-router-agent/README.md

# Content Router Agent

The Content Router Agent is a LangGraph-based microservice that intelligently routes content generation tasks between the Copywriter and Rewriter agents based on keyword analysis and existing content detection.

## Architecture

```
Content Finder Agent → Router Agent → Copywriter/Rewriter Agent
```

### Agent Flow

1. **Site Selection**: Analyzes keywords to determine the best matching website
2. **Content Analysis**: Checks for existing similar content using database and sitemap
3. **Routing Decision**: Routes to either Copywriter (new content) or Rewriter (update existing)

## Features

- ✅ **Intelligent Site Selection** based on keyword analysis
- ✅ **Content Duplication Detection** using database and sitemap analysis
- ✅ **Routing Logic** to appropriate downstream agents
- ✅ **Internal Linking Suggestions** for SEO optimization
- ✅ **Confidence Scoring** for decision quality
- ✅ **Persistent Storage** using SQLite database

## Project Structure

```
services/content-router-agent/
├── src/
│   ├── main.py              # Flask application and main entry point
│   ├── models.py            # TypedDict models and data structures
│   ├── config.py            # Configuration and website settings
│   ├── database.py          # SQLite database operations
│   ├── tools.py             # LangChain tools for LangGraph
│   └── agent.py             # LangGraph agent implementation
├── tests/
│   ├── test_main.py         # API endpoint tests
│   ├── test_agent.py        # Agent workflow tests
│   ├── test_tools.py        # Tools functionality tests
│   └── test_database.py     # Database operation tests
├── Dockerfile               # Container configuration
├── requirements.txt         # Python dependencies
├── .dockerignore           # Docker ignore rules
└── README.md               # This file
```

## API Endpoints

### POST /route
Main routing endpoint that processes Content Finder output.

**Request Body:**
```json
{
  "keyword": "meilleure souris gamer",
  "similar_keywords": [
    {"keyword": "souris gamer 2025", "monthly_searches": 5400, "competition": "low"}
  ],
  "serp_analysis": {
    "top_results": [...],
    "people_also_ask": [...]
  }
}
```

**Response:**
```json
{
  "success": true,
  "routing_decision": "copywriter",
  "selected_site": {
    "site_id": 1,
    "name": "Gaming Hub",
    "niche": "gaming"
  },
  "confidence_score": 0.85,
  "reasoning": "No similar content found. Creating new content.",
  "payload": {
    "agent_target": "copywriter",
    "keyword": "meilleure souris gamer",
    "site_config": {...},
    "serp_analysis": {...}
  }
}
```

### GET /health
Health check endpoint.

## Configuration

### Environment Variables

- `OPENAI_API_KEY`: OpenAI API key for LLM operations
- `PROJECT_ID`: GCP Project ID
- `ENVIRONMENT`: Deployment environment (dev/staging/prod)
- `DB_PATH`: Path to SQLite database file
- `PORT`: Server port (default: 8080)

### Website Configuration

Edit `src/config.py` to modify the 5 WordPress websites:

```python
WEBSITES = [
    WebsiteConfig(
        site_id=1,
        name="Gaming Hub",
        domain="gaminghub.fr",
        niche="gaming",
        # ... other configs
    ),
    # ... 4 more sites
]
```

## Local Development

### Prerequisites
- Python 3.11+
- OpenAI API key

### Setup

1. **Clone and navigate to the service:**
```bash
cd services/content-router-agent
```

2. **Create virtual environment:**
```bash
python -m venv venv
source venv/bin/activate  # Linux/Mac
# or
venv\Scripts\activate     # Windows
```

3. **Install dependencies:**
```bash
pip install -r requirements.txt
```

4. **Set environment variables:**
```bash
export OPENAI_API_KEY="your-openai-key"
export ENVIRONMENT="development"
export DB_PATH="./data/content_db.sqlite"
```

5. **Run the service:**
```bash
python src/main.py
```

The service will be available at `http://localhost:8080`

### Testing

Run tests with pytest:
```bash
pip install pytest pytest-cov
python -m pytest tests/ -v --cov=src/
```

## Docker Development

### Build and run locally:
```bash
docker build -t content-router-agent .
docker run -p 8080:8080 \
  -e OPENAI_API_KEY="your-key" \
  -e ENVIRONMENT="development" \
  content-router-agent
```

## GCP Deployment

### Prerequisites
- GCP Project with Artifact Registry enabled
- Service account with required permissions
- Terraform installed

### Infrastructure Setup

1. **Navigate to Terraform module:**
```bash
cd infra/terraform/modules/content-router-service/
```

2. **Initialize Terraform:**
```bash
terraform init
```

3. **Deploy infrastructure:**
```bash
terraform plan -var="project_id=your-project-id"
terraform apply
```

### CI/CD Deployment

The service automatically deploys via GitHub Actions when changes are pushed to the `services/content-router-agent/` directory.

**Required GitHub Secrets:**
- `GCP_PROJECT_ID`: Your GCP project ID
- `GCP_SA_KEY`: Service account key JSON

### Manual Deployment

1. **Build and push Docker image:**
```bash
# Configure Docker for GCP
gcloud auth configure-docker europe-west1-docker.pkg.dev

# Build and push
docker build -t europe-west1-docker.pkg.dev/PROJECT_ID/content-agents/content-router:latest .
docker push europe-west1-docker.pkg.dev/PROJECT_ID/content-agents/content-router:latest
```

2. **Deploy to Cloud Run:**
```bash
gcloud run deploy content-router-agent \
  --image europe-west1-docker.pkg.dev/PROJECT_ID/content-agents/content-router:latest \
  --region europe-west1 \
  --platform managed \
  --memory 1Gi \
  --cpu 1 \
  --max-instances 10
```

## Integration with Other Agents

### Input from Content Finder Agent

The Router Agent expects JSON input from the Content Finder Agent with this structure:
- `keyword`: Main search term
- `similar_keywords`: Array of related keywords with metrics
- `serp_analysis`: SERP data including top results and PAA questions

### Output to Copywriter/Rewriter Agents

**For Copywriter Agent:**
```json
{
  "agent_target": "copywriter",
  "keyword": "target keyword",
  "site_config": {...},
  "serp_analysis": {...},
  "internal_linking_suggestions": [...]
}
```

**For Rewriter Agent:**
```json
{
  "agent_target": "rewriter",
  "keyword": "target keyword",
  "site_config": {...},
  "existing_content": {...},
  "serp_analysis": {...},
  "internal_linking_suggestions": [...]
}
```

## Monitoring and Logging

The service includes:
- **Health checks** at `/health` endpoint
- **Structured logging** with Python logging module
- **Error handling** with proper HTTP status codes
- **Request/response logging** for debugging

### Logs to monitor:
- Site selection decisions
- Content duplication findings
- Routing decisions and reasoning
- API errors and performance metrics

## Security

- **IAP Protection**: All endpoints protected by Google Identity-Aware Proxy
- **Service Account**: Least privilege access to required GCP services
- **Secrets Management**: API keys stored in Google Secret Manager
- **Network Security**: VPC-native deployment with private networking

## Performance

- **Autoscaling**: 0-10 instances based on traffic
- **Resource Limits**: 1 vCPU, 1GB RAM per instance
- **Database**: SQLite for fast local storage
- **Caching**: Sitemap content cached to reduce external requests

## Troubleshooting

### Common Issues

1. **Database connection errors**
   - Check DB_PATH environment variable
   - Ensure /app/data directory has write permissions

2. **Site selection accuracy**
   - Review niche indicators in `tools.py`
   - Check keyword analysis confidence scores

3. **External API timeouts**
   - Verify sitemap URLs are accessible
   - Check network connectivity in Cloud Run

### Debug Mode

Set `ENVIRONMENT=development` for verbose logging:
```bash
export ENVIRONMENT=development
python src/main.py
```

## Contributing

1. Create feature branch from `main`
2. Make changes with tests
3. Run test suite: `pytest tests/ -v`
4. Submit pull request
5. CI/CD will test and deploy automatically

## License

Internal use only - Part of the multi-agent content generation system.