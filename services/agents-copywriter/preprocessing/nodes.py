from agents.preprocessing.load_agent import LoadAgent
from langchain_openai import ChatOpenAI
from core.state import GraphState
from utils.cleaning import clean_html_for_processing, clean_transcript
from bs4 import BeautifulSoup
from utils.transcript import extract_video_id
from utils.file_io import save_html_to_file

llm = ChatOpenAI(model="gpt-4.1-2025-04-14", temperature=1, top_p=0.95, frequency_penalty=0.5, presence_penalty=0.8)


def load_node():
    loader = LoadAgent()

    def _load(state: GraphState) -> GraphState:
        print("[PREPROCESS] üöÄ √âtape 1 : Chargement du HTML et transcript")
        article_html, transcript = loader.load(state["article_url"], state["transcript_url"])
        print(f"[PREPROCESS] üìÑ HTML r√©cup√©r√© ({len(article_html)} caract√®res)")
        print(f"[PREPROCESS] üéôÔ∏è Transcript r√©cup√©r√© ({len(transcript)} caract√®res)")

        return {
            **state,
            "article_html": article_html,
            "transcript_text": transcript,
        }

    return _load


def clean_node():
    def _clean(state: GraphState) -> GraphState:
        print("[PREPROCESS] üßº √âtape 2 : Nettoyage HTML & transcript")
        raw_html = state["article_html"]
        raw_transcript = state["transcript_text"]

        cleaned_html = clean_html_for_processing(raw_html)
        cleaned_transcript = clean_transcript(raw_transcript)

        # Sauvegarde HTML nettoy√©
        video_id = extract_video_id(state["transcript_url"])
        save_html_to_file(cleaned_html, f"{video_id}.html")

        print(f"[PREPROCESS] ‚úÖ HTML nettoy√© ({len(cleaned_html)} caract√®res)")
        print(f"[PREPROCESS] ‚úÖ Transcript nettoy√© ({len(cleaned_transcript)} caract√®res)")

        return {
            **state,
            "article_html": cleaned_html,
            "transcript_text": cleaned_transcript,
        }

    return _clean

def neutralize_temporality_node():

    def _neutralize(state: GraphState) -> GraphState:
        subject = state["subject"]
        html = state["article_html"]
        title_text = state.get("diagnosis") or "Aucun"

        prompt = f"""
### CONTEXTE
Tu es un assistant sp√©cialis√© dans l'√©dition de contenu HTML li√© aux jeux vid√©o.

### OBJECTIF
Nettoyer le contenu HTML pour le rendre **p√©renne et intemporel**.

### DONN√âES DE CONTEXTE
- Sujet de l'article : {subject}
- Titre de section : {title_text}

### R√àGLES
1. Supprime toutes les **r√©f√©rences temporelles** pr√©cises si elles **ne sont pas explicitement pr√©sentes** dans le sujet ou le titre.
   - Exemples √† retirer : ann√©es (2023, 2024), mois (mars, janvier), saisons (saison 14), patchs (1.19), p√©riodes ("r√©cemment", "il y a deux ans", "cette ann√©e", etc.)
2. Si une **r√©f√©rence temporelle est dans le sujet ou le titre**, tu peux la conserver mais elle doit √™tre coh√©rente.
3. Supprime toute phrase incoh√©rente ou inutile une fois la date retir√©e.
4. Pr√©serve le ton d‚Äôorigine et la structure HTML (<p>, <ul>, <strong>, etc.).
5. √âcris en fran√ßais uniquement.

### HTML √Ä MODIFIER
{html}

### OUTPUT ATTENDU
R√©ponds uniquement avec le HTML nettoy√©, sans aucun commentaire ou texte hors HTML.
"""

        try:
            response = llm.invoke(prompt)
            cleaned_html = response.content.strip()
            print("\n[NEUTRALIZE] ‚úÖ HTML sans temporalit√© (500 premiers caract√®res) :\n")
            print(cleaned_html[:500])
            return {
                **state,
                "article_html": cleaned_html
            }
        except Exception as e:
            print(f"[NEUTRALIZE] ‚ùå Erreur lors du nettoyage de la temporalit√© : {e}")
            return state

    return _neutralize